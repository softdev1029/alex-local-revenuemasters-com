{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% if paragraph.field_paragraph_image_position.value|striptags|replace({"\n":"", " ":""})|lower == 'right' %} 
{%  set image_position = "right" %}
{% else %}
{%  set image_position = "left" %}
{% endif %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
	paragraph.field_paragraph_extra_class.value|render|trim,
	'side-image',
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  ]
%}
{% set img_url = file_url(content.field_paragraph_image['#items'].entity.uri.value) %}
{% block paragraph %}
  <section{{ attributes.addClass(classes) }} >
	{% if image_position == "left" %}
	<div class="image-container col-md-5 col-sm-4 pull-left">
	  <div class="background-image-holder">
		<img alt="background" src="{{ img_url }}" />
	  </div>
	</div>
    <div class="container">
	  <div clas="row">
	    <div class="col-md-6 col-md-offset-6 col-sm-7 col-sm-offset-5 content clearfix">
          {% block content %}	
            {{ content|without('field_paragraph_extra_class','field_paragraph_image','field_paragraph_image_position') }}
          {% endblock %}
	    </div>
	  </div>
	</div>
	{% endif %}
	
	
	{% if image_position == "right" %}
	<div class="image-container col-md-5 col-sm-3 pull-right">
	  <div class="background-image-holder">
		<img class="background-image" alt="Background Image" src="{{ img_url }}">
	  </div>
	</div>
    <div class="container">
	  <div clas="row">
	    <div class="col-md-6 content col-sm-8 clearfix">
            {{ content|without('field_paragraph_extra_class','field_paragraph_image','field_paragraph_image_position') }}
	    </div>
	  </div>
	</div>
	{% endif %}
  </section>
{% endblock paragraph %}
